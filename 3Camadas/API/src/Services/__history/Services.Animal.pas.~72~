unit Services.Animal;

interface

uses
  System.SysUtils, System.Classes, Provider.Conexao, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error,
  FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys,
  FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteWrapper.Stat,
  FireDAC.ConsoleUI.Wait, Data.DB, FireDAC.Comp.Client, Data.FMTBcd, Data.SqlExpr, FireDAC.Stan.Param, FireDAC.DatS,
  FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.VCLUI.Wait,

  System.JSON, DataSet.Serialize;

type
  TServiceAnimal = class(TConexao)
    QryAnimal: TFDQuery;
  private
    { Private declarations }
  public
    { Public declarations }
    function Inserir(const AAnimal: TJSONObject): TFDQuery;
    function Alterar(const AAnimal: TJSONObject): Boolean;
    function Excluir(ADescricao: String): Boolean;
    function GetAnimais(): TFDQuery;
    function GetAnimalByDescricao(ADescricao: String): TFDQuery;
  end;

var
  ServiceAnimais: TServiceAnimal;

implementation

uses
  App.Util;

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

{ TServiceAnimais }

function TServiceAnimal.Alterar(const AAnimal: TJSONObject): Boolean;
begin
  QryAnimal.MergeFromJSONObject(AAnimal, False);
  Result := QryAnimal.Modified;
end;

function TServiceAnimal.Excluir(ADescricao: String): Boolean;
begin
  Result := QryAnimal.ExecSQL('Delete from animals where name = ' + QuotedStr(ADescricao)) > 0;
end;

function TServiceAnimal.GetAnimais: TFDQuery;
begin
  try
    QryAnimal.Close;
    QryAnimal.Open;
    Result := QryAnimal;
  except on E: Exception do
    raise Exception.Create(e.message);
  end;
end;

function TServiceAnimal.GetAnimalByDescricao(ADescricao: String): TFDQuery;
begin
  try
    QryAnimal.Close;
    QryAnimal.SQL.Add('where name like ' + QuotedStr('%' + ADescricao + '%'));
    QryAnimal.Open;
    Result := QryAnimal;
  except on E: Exception do
    raise Exception.Create(e.message);
  end;
end;

function TServiceAnimal.Inserir(const AAnimal: TJSONObject): TFDQuery;
begin
  QryAnimal.SQL.Add('Where 1<>1');
  QryAnimal.Open;
  QryAnimal.LoadFromJSON(AAnimal, False);
  Result := QryAnimal;
end;

end.
