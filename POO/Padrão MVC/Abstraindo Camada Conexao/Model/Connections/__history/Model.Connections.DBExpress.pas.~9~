unit Model.Connections.DBExpress;

interface

uses
  System.SysUtils, Data.SqlExpr, Model.Connections.Interfaces,
  System.Classes, Vcl.DBCtrls, Vcl.DBGrids, Data.DB;



type
  TModelConnectionsDBExpress = class(TInterfacedObject, IModelConnectionsGeneric<TCustomConnection>)
  private
    FConnection: TSQLConnection;
    FQry: TSQLQuery;
    FDataSource: TDataSource;
    procedure ConnectionConfig;
  public
    constructor Create;
    destructor Destroy; override;
    class function New: IModelConnectionsGeneric<TCustomConnection>;

    procedure Close;
    function Connection: TCustomConnection;
    function GetDataSet: TDataSet;
    function ParamByName(AValue: String): TCollectionItem;
    function FieldByName(AValue: String): TField;
    function SQL: TStrings;
    function Open: IModelConnectionsGeneric<TCustomConnection> ; overload;
    function Open(AValue: String): IModelConnectionsGeneric<TCustomConnection> ; overload;
    function DBNavigator(const ADBNavigator: TDBNavigator): IModelConnectionsGeneric<TCustomConnection>;
    function DBGrid(const ADBGrid: TDBGrid): IModelConnectionsGeneric<TCustomConnection>;
  end;

implementation


{ TModelConnectionsFireDac }

function TModelConnectionsDBExpress.Connection: TCustomConnection;
begin
  Result := Self.FConnection;
end;

procedure TModelConnectionsDBExpress.ConnectionConfig;
begin
  try
    FConnection.Connected             := False;
    FConnection.DriverName            := 'Firebird';
    FConnection.LoginPrompt           := False;
    FConnection.Params.Add('database=D:\Renato\ReactNative\AutRemotaBackEnd\DB\DB.FDB');
    FConnection.Params.Add('UserName=SYSDBA');
    FConnection.Params.Add('Password=masterkey');
    FConnection.Connected             := True;
  except on E: Exception do
    raise Exception.Create(E.Message);
  end;
end;

constructor TModelConnectionsDBExpress.Create;
begin
  FConnection         := TSQLConnection.Create(nil);
  ConnectionConfig();
  FQry                := TSQLQuery.Create(FConnection);
  FQry.SQLConnection  := FConnection;
  FDataSource         := TDataSource.Create(FConnection);
  FDataSource.DataSet := FQry;
end;

destructor TModelConnectionsDBExpress.Destroy;
begin
  inherited;
  FreeAndNil(FQry);
  FreeAndNil(FConnection);
end;

function TModelConnectionsDBExpress.GetDataSet: TDataSet;
begin
  Result := FQry;
end;

class function TModelConnectionsDBExpress.New: IModelConnectionsGeneric<TCustomConnection>;
begin
  Result := Self.Create;
end;

function TModelConnectionsDBExpress.Open: IModelConnectionsGeneric<TCustomConnection>;
begin
  FQry.Open;
  Result:= FQry;
end;

function TModelConnectionsDBExpress.Open(AValue: String): IModelConnectionsGeneric<TCustomConnection>;
begin
  FQry.Close;
  FQry.SQL.Clear;
  FQry.SQL.Add(AValue);
  FQry.Open;
  Result:= FQry;
end;

procedure TModelConnectionsDBExpress.Close;
begin
  FQry.Close;
end;

function TModelConnectionsDBExpress.ParamByName(AValue: String) : TCollectionItem;
begin
  Result := FQry.ParamByName(AValue);
end;

function TModelConnectionsDBExpress.FieldByName(AValue: String) : TField;
begin
  Result := FQry.FieldByName(AValue);
end;

function TModelConnectionsDBExpress.SQL: TStrings;
begin
  Result := FQry.SQL;
end;

function TModelConnectionsDBExpress.DBGrid(const ADBGrid: TDBGrid): IModelConnectionsGeneric<TCustomConnection>;
begin
  Result := Self;
  ADBGrid.DataSource := FDataSource;
end;

function TModelConnectionsDBExpress.DBNavigator(const ADBNavigator: TDBNavigator): IModelConnectionsGeneric<TCustomConnection>;
begin
  Result := Self;
  ADBNavigator.DataSource:= FDataSource;
end;

end.

