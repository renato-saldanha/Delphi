unit Regra.PrecoFeriado;

interface

uses
  Regra.Interfaces, System.SysUtils, Regra.Controller;

type
  TRegraPrecoFeriado = class(TInterfacedObject, iRegras)
  private
    FParametros: iRegrasParametros;
    FOperacoes: iRegrasOperacoes;
  public
    constructor Create();
    destructor Destroy; override;
    class function New: iRegras;
    function Operacoes: iRegrasOperacoes;
    function Parametros: iRegrasParametros;
  end;

implementation

uses
  Regra.Tipo, Regra.Operacoes, Regra.Parametros;

{ TRegraPrecoFeriado }

constructor TRegraPrecoFeriado.Create;
begin
  Self.Parametros.PercAumento(0.4);
end;

destructor TRegraPrecoFeriado.Destroy;
begin

  inherited;
end;

class function TRegraPrecoFeriado.New: iRegras;
begin
  Result := Self.Create;
end;

function TRegraPrecoFeriado.Operacoes: iRegrasOperacoes;
begin
  if not(Assigned(FOperacoes)) then
    FOperacoes := TRegrasOperacoes.New(Self);
  Result := FOperacoes;
end;

function TRegraPrecoFeriado.Parametros: iRegrasParametros;
begin
  if not(Assigned(FParametros)) then
    FParametros := TRegrasParametros.New(Self);;
  Result := FParametros;
end;

initialization

TRegrasController.New.RegistrarClasse(Integer(trPrecoFeriado), 'Preço Feriado');

end.
