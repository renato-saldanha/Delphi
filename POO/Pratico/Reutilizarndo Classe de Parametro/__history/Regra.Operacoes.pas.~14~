unit Regra.Operacoes;

interface

uses
  Regra.Interfaces, System.SysUtils;
type
  TRegrasOperacoes = class(TInterfacedObject, iRegrasOperacoes)
    private
      FDisplay: TProc<String>;
    function Display(aValue: TProc<string>): iRegrasOperacoes;
    public
      constructor Create;
      destructor Destroy; override;
      class function  New: iRegrasOperacoes;

      function CalcularImposto(aValue: Currency): Currency; overload;
      function CalcularImposto(aValue: String): Currency; overload;
  end;


implementation

{ TRegrasOperacoes }

class function TRegrasOperacoes.New: iRegrasOperacoes;
begin
  Result:= Self.Create;
end;

constructor TRegrasOperacoes.Create;
begin

end;

destructor TRegrasOperacoes.Destroy;
begin
  inherited;

  Self.Free;
end;

function TRegrasOperacoes.CalcularImposto(aValue: Currency): Currency;
begin
  Result:= (aValue * 0.4) + aValue;

//  if (Assigned(FDisplay)) then
//    FDisplay(CurrToStr(Result));
end;

function TRegrasOperacoes.CalcularImposto(aValue: String): Currency;
begin
  Result:= 0;

  if (TryStrToCurr(aValue, Result)) then
    Result:= CalcularImposto(StrToCurr(aValue));
end;

function TRegrasOperacoes.Display(aValue: TProc<string>): iRegrasOperacoes;
begin
  Result    := Self;
  FDisplay  := aValue;
end;

end.
