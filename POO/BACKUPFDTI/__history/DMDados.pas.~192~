unit DMDados;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs, Db, DateUtils,
  DBClient, Provider, StdCtrls, MidasLib, IniFiles, Registry, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.PG, FireDAC.Phys.PGDef, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.VCLUI.Wait, FireDAC.Comp.UI, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TDataModuleDados = class(TDataModule)
    DatabaseMaximus: TFDConnection;
    QryCadClienteBackup: TFDQuery;
    QryConsClienteBackup: TFDQuery;
    QrySincClienteBackupArquivo: TFDQuery;
    QryCadClienteBackupArquivo: TFDQuery;
    QryConsClienteBackupArquivos: TFDQuery;
    QryGeral: TFDQuery;
    FDGUIxWaitCursor1: TFDGUIxWaitCursor;
    FDPhysPgDriverLink1: TFDPhysPgDriverLink;
    procedure DatabaseMaximusAfterConnect(Sender: TObject);
    procedure QrySincClienteBackupArquivoAfterOpen(DataSet: TDataSet);
    procedure DataModuleCreate(Sender: TObject);
    procedure QryCadClienteBackupArquivoAfterOpen(DataSet: TDataSet);
  private
    procedure QueryError(aForm, AInitiator: TObject; var AException: Exception);
    { Private declarations }
  public
    { Public declarations }
    function DataServidor(ASomenteData: Boolean): TDateTime;
    function ConfiguraConexao: Boolean;

    procedure ConfigurarQueries;
    procedure CarregarEncodingBancoDados;


  end;

var
  DataModuleDados: TDataModuleDados;

implementation

uses
  BibVariavel, BibMarco, App.Util;

{%CLASSGROUP 'Vcl.Controls.TControl'}
{$R *.dfm}


procedure TDataModuleDados.DatabaseMaximusAfterConnect(Sender: TObject);
begin
  QryGeral.Open('select nspname from pg_namespace where nspname=''replicador''');
  Banco_Dados_Replicado := (not QryGeral.IsEmpty);
end;

procedure TDataModuleDados.DataModuleCreate(Sender: TObject);
begin
  DatabaseMaximus.Connected := False;
  VPBibliotecaTransmissaoNota := 'W';
end;

function TDataModuleDados.DataServidor(ASomenteData: Boolean): TDateTime;
begin
  Result := DatabaseMaximus.ExecSQLScalar('SELECT current_timestamp');
  Result := StrToDateTime(FormatDateTime('dd/MM/yyyy HH:mm:ss', Result));
  if ASomenteData then
    Result := DateOf(Result);
end;

function TDataModuleDados.ConfiguraConexao: Boolean;
var
  LBDuser : String;
  LBDpws : String;
  LSecao: String;
begin
  try
    Result := False;
    LSecao := 'MAXIMUS - 192.168.0.150/' + UpperCase(GetEnvironmentVariable('SESSIONNAME'));
    LBDuser := 'postgres';
    LBDpws := 'FTI@pg#1800';
    CarregarConfigsIni(Banco_Dados, IP_Servidor);

    if (IP_Servidor <> '') and (Banco_Dados <> '') then
    begin
      DatabaseMaximus.Params.Clear;
      DatabaseMaximus.Params.Add('Server=' + IP_Servidor);
      DatabaseMaximus.Params.Add('Database=' + Banco_Dados);
      DatabaseMaximus.Params.Add('Port=5432');
      DatabaseMaximus.Params.Add('DriverID=PG');
      DatabaseMaximus.Params.Add('User_Name=' + LBDuser);
      DatabaseMaximus.Params.Add('Password=' + LBDpws);
      DatabaseMaximus.Params.Add('ApplicationName=' + LSecao);
      DatabaseMaximus.Params.Add('MonitorBy=mbRemote');
      DatabaseMaximus.Params.Add('MonitorByInitial=True');
      DatabaseMaximus.Connected := True;
      DatabaseMaximus.ConnectionIntf.Tracing := True;

      Self.CarregarEncodingBancoDados;
      Self.ConfigurarQueries;

      Result := True;
    end;
  except on E: Exception do
    begin
      Result := False;
      Mensagem('Não foi possível configurar a conexão.' + sLineBreak + e.Message, mtError, [mbOK]);
    end;
  end;
end;

procedure TDataModuleDados.ConfigurarQueries;
begin
  for var I := 0 to Pred(Self.ComponentCount) do
  begin
    if Self.Components[I] is TFDQuery then
    begin
      TFDQuery(Self.Components[I]).ConnectionName := ConnectionName_Licenciamento;
      if VPDebug then
        TFDQuery(Self.Components[I]).OnError := QueryError;
    end;
  end;
end;

procedure TDataModuleDados.QueryError(aForm, AInitiator: TObject; var AException: Exception);
begin
  Mensagem(AException.Message, mtError, [mbOK], 0);
end;

procedure TDataModuleDados.CarregarEncodingBancoDados;
begin
  VPEncodingBancoDados := DatabaseMaximus.ExecSQLScalar
    ('SELECT pg_encoding_to_char(encoding) FROM pg_database WHERE datname = :nome_banco', [Banco_Dados], [ftString]);
end;


procedure TDataModuleDados.QryCadClienteBackupArquivoAfterOpen(DataSet: TDataSet);
begin
  DataSet.FieldByName('nome_arquivo').ReadOnly := False;
  DataSet.FieldByName('ordem').ReadOnly        := False;
end;

procedure TDataModuleDados.QrySincClienteBackupArquivoAfterOpen(DataSet: TDataSet);
begin
  DataSet.FieldByName('nome_arquivo').ReadOnly := False;
end;

end.
